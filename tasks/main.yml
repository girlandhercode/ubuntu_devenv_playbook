---

# if running this from cli use following command:
#  ansible-playbook main.yml --connection=local -e ansible_python_interpreter=/usr/bin/python3 --ask-sudo-pass --start-at-task="name of task" --check

- hosts: localhost
  # gather_facts: yes
  vars_files:
    - ../defaults/main.yml
  # vars_prompt:
  #   - name: "fzf_install_choice"
  #     prompt: "Choose installation method for fzf. Enter 'git' or 'bin'"
  #     default: "git"
  #     private: no
  tasks:
    - name: Install python for Ansible if needed
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal python-zipstream)
      become: yes
      changed_when: False

    - name: Add PPAs
      apt_repository:
        repo: "{{ item }}"
        state: present
        update_cache: true
      with_items: "{{ ubuntu_ppas }}"

    - name:  Install required packages
      apt:
        name:             "{{ item }}"
        update_cache:     yes
        state:            present
        cache_valid_time: 3600
      become:             yes
      with_items:         "{{ ubuntu_required_packages }}"
      tags:               install.packages

    - git_config:
        name: user.email
        scope: global
        value: 'git.20.trinity32@spamgourmet.com'

    - git_config:
        name: user.name
        scope: global
        value: "girlandhercode"

    - name: Clone oh-my-zsh repo
      git: repo=https://github.com/robbyrussell/oh-my-zsh.git dest=~/.oh-my-zsh
      become: no

    - name: Determine whether ~/.zshrc exists
      stat:
          path: ~/.zshrc
      register: zshrc_exists
      become: no

    - name: Rename standard .zshrc
      command: mv ~/.zshrc ~/.zshrc.OLD
      when: zshrc_exists.stat.exists

    - name: Deploy .zshrc
      template: src=zshrc.j2 dest=~/.zshrc
      become: no
      when: zshrc_exists.stat.exists == False

    - name: Set zsh as default shell (Ubuntu Xenial)
      user: name={{ansible_user_id}} shell=/usr/bin/zsh
      become: yes
      when: ansible_lsb.codename == 'xenial'

    - name: Create 'Downloads' dir if it does not exist
      file:
        path: /home/{{ ansible_user_id }}/Downloads
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: 0700

#######################################################
##### Install fzf executable without bash binds etc
#######################################################

    # Based on info in: https://stackoverflow.com/a/26738019/2501386
    - name: Get url for latest version of fzf for linux
      shell: curl -s https://api.github.com/repos/junegunn/fzf-bin/releases/latest | grep browser_download_url | grep 'linux_amd64.tgz' | cut -d '"' -f 4
      register: fzf_url
      when: ( fzf_install_choice == "bin" )

    - name: Download fzf
      get_url:
        url: "{{ fzf_url.stdout }}"
        dest: /home/{{ ansible_user_id }}/Downloads/{{ fzf_url.stdout | basename }}
      when: ( fzf_install_choice == "bin" )

    - name: Unpack fzf
      unarchive:
        copy: no
        src: /home/{{ ansible_user_id }}/Downloads/{{ fzf_url.stdout | basename }}
        dest: /home/{{ ansible_user_id }}/Downloads
      when: ( fzf_install_choice == "bin" )

############       OR      ###########################
##### Install fzf via 'git clone' to include extras
##### like keybinds in bash etc.
######################################################

    - name: Clone fzf repo
      git:
        repo: https://github.com/junegunn/fzf.git
        dest: /home/{{ ansible_user_id }}/.fzf
        depth: 1
      become: no

  # WONTDO: Implement expect for questions asked during fzf install

  # Need to escape special characters for regex
  # Info here: https://stackoverflow.com/a/39458575/2501386
  #  "Do you want to enable fuzzy auto-completion? ([y]/n)"
  #  "Do you want to enable key bindings? ([y]/n)"
  #  "Do you want to update your shell configuration files? ([y]/n)"

  #  Then source ~/.zshrc

    - name: Install fzf
      shell: /home/{{ ansible_user_id }}/.fzf/install --all --64 --key-bindings --completion --update-rc --no-fish

######################################################
##### Install Neovim plugin manager - 'vim-plug' - junegunn/vim-plug
######################################################

    - name: Ensure nvim conf dirs exist
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /home/{{ ansible_user_id }}/.local/share/nvim/site/autoload
        - /home/{{ ansible_user_id }}/.config/nvim

    - name: Download and install 'vim-plug'
      get_url:
        url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        dest: /home/{{ ansible_user_id }}/.local/share/nvim/site/autoload/plug.vim

    - name: Install nvim plugins
      command: nvim +PlugInstall +qall --headless
      changed_when: False

#####################################################
##### Manage ssh keys
#####################################################

# Keys must either already exist or be created by
# https://github.com/girlandhercode/windows-development-environment

    - name: Check for correct user's .ssh directory
      copy:
        src: /mnt/c/Users/{{ item }}/.ssh
        dest: /home/{{ ansible_user_id }}/
        # mode: 0700
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
      with_items:
          - cnmill05
      when: ansible_env.PATH | search('cnmill05')

    - name: Change mode of .ssh dir
      file:
        path: /home/{{ ansible_user_id }}/.ssh
        mode: 0700

    - name: Change mode of all private ssh keys in .ssh
      file:
        path: "{{ item }}"
        mode: 0600
      with_fileglob:
        - '/home/{{ ansible_user_id }}/.ssh/*id_rsa*'
        - '/home/{{ ansible_user_id }}/.ssh/config'

    - name: Change mode of all public keys in .ssh
      file:
        path: "{{ item }}"
        mode: 0644
      with_fileglob: '/home/{{ ansible_user_id }}/.ssh/*.pub'
